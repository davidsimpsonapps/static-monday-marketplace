name: Historic App Install Data Update

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  workflow_dispatch:      # Allows manual triggering

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest install data
        run: |
          curl -s "https://monday-apps-ms.monday.com/apps_ms/public/app_analytics/app_installs" > new_installs.json
          # Validate JSON is not empty
          if [ ! -s new_installs.json ]; then
            echo "Error: Received empty response from API"
            exit 1
          fi

      - name: Process and merge data
        run: |
          mkdir -p src/_data/json/installs/apps
          current_date=$(date +'%Y-%m-%d')

          # Process each app's data with robust error handling
          jq -r 'to_entries[] | {appId: .key, count: .value}' new_installs.json | while read -r line; do
            appId=$(echo "$line" | jq -r '.appId')
            count=$(echo "$line" | jq -r '.count')

            # Check if values exist
            if [ -z "$appId" ] || [ -z "$count" ]; then
              echo "Skipping invalid entry: $line"
              continue
            fi

            output_file="src/_data/json/installs/apps/${appId}.json"

            # Create or update the JSON file
            if [ -f "$output_file" ]; then
              jq \
                --arg date "$current_date" \
                --argjson count "$count" \
                '
                  (.installHistory // []) |= (
                    if any(.date == $date) then
                      map(if .date == $date then .count = $count else . end)
                    else
                      . + [{date: $date, count: $count}]
                    end
                  )
                ' "$output_file" > "tmp.json" && mv "tmp.json" "$output_file"
            else
              jq -n \
                --arg appId "$appId" \
                --arg date "$current_date" \
                --argjson count "$count" \
                '{
                  appId: $appId,
                  installHistory: [{
                    date: $date,
                    count: $count
                  }]
                }' > "$output_file"
            fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add src/_data/json/installs/apps/
          git commit -m "Daily app install data update - $(date +'%Y-%m-%d')"
          git push
