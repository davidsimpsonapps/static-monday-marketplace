name: Historic App Install Data Update

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:      # Allows manual runs

jobs:
  update-installs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch app install data
        run: |
          curl -s "https://monday-apps-ms.monday.com/apps_ms/public/app_analytics/app_installs" > installs.json

      - name: Process and store app data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/installs/apps/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of installs.json
          cp installs.json "src/_data/json/installs/apps/historical/${current_date}.json"

          # Process each app entry
          jq -r 'to_entries[] | "\(.key) \(.value)"' installs.json | while read appId count; do
            output_file="src/_data/json/installs/apps/${appId}.json"

            if [ -f "$output_file" ]; then
              # Update existing file (append new entry)
              jq \
                --arg date "$current_date" \
                --arg count "$count" \
                '.history += [{"date": $date, "count": $count}]' \
                "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg appId "$appId" \
                --arg date "$current_date" \
                --arg count "$count" \
                '{
                  appId: $appId,
                  history: [{
                    date: $date,
                    count: $count
                  }]
                }' > "$output_file"
            fi
          done

      - name: Fetch vendor install data
        run: |
          curl -s 'https://marketplace-ms.monday.com/marketplace_ms/public/marketplace-developers?includeEnrichment=true' > vendors.json
      
      - name: Process and store vendor data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/installs/vendors/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of vendors.json
          cp vendors.json "src/_data/json/installs/vendors/historical/${current_date}.json"

          # Process each app entry from marketplace_developers array
          jq -c '.marketplace_developers[] | {id: .id, installs: .installs}' vendors.json | while read -r entry; do
            vendorId=$(echo "$entry" | jq -r '.id')
            count=$(echo "$entry" | jq -r '.installs')
            output_file="src/_data/json/installs/vendors/${vendorId}.json"

            if [ -f "$output_file" ]; then
              # Update existing file (append new entry)
              jq \
                --arg date "$current_date" \
                --arg count "$count" \
                '.history += [{"date": $date, "count": $count}]' \
                "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg vendorId "$vendorId" \
                --arg date "$current_date" \
                --arg count "$count" \
                '{
                  vendorId: $vendorId,
                  history: [{
                    date: $date,
                    count: $count
                  }]
                }' > "$output_file"
            fi
          done
 
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add src/_data/json/installs/
          git commit -m "Auto-update install data - $(date +'%Y-%m-%d %H:%M')"
          git push