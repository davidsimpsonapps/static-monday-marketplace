name: Historic App Data Update 

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual runs

jobs:
  update-installs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch full marketplace data
        run: |
          curl -s "https://cdn.monday.com/public_marketplace_apps" > marketplace.json

      - name: Process and store marketplace data
        run: |
          # Create target directories
          mkdir -p src/_data/json/marketplace/historical
          mkdir -p src/_data/json/marketplace/categories
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of marketplace.json (unsanitized)
          cp marketplace.json "src/_data/json/marketplace/historical/${current_date}.json"

          # Save the 'current version' of marketplace.json (unsanitized)
          cp marketplace.json "src/_data/json/marketplace/marketplace.json"

          # Sanitize function for category processing only
          sanitize_for_categories() {
            local json_data="$1"
            echo "$json_data" | jq -c '
              # Basic JSON validation and cleanup
              if type == "object" then 
                .marketplace_apps |= (map(
                  select(.app_id? != null) |
                  del(.description, .short_description, .compliance_answers, .plans)
                ))
              else empty end
            ' 2>/dev/null || echo '{}'
          }

          # Process categories with sanitized data
          sanitized_data=$(sanitize_for_categories "$(cat marketplace.json)")

          echo "$sanitized_data" | jq -c '.marketplace_apps[]?' | while read -r app_data; do
            # Extract required fields
            app_id=$(echo "$app_data" | jq -r '.app_id')
            categories=$(echo "$app_data" | jq '.marketplace_category_ids? // []')
            
            # Skip if no valid app_id
            if [ -z "$app_id" ] || [ "$app_id" = "null" ]; then
              continue
            fi
            
            output_file="src/_data/json/marketplace/categories/${app_id}.json"
            
            # Create history entry
            entry=$(jq -n \
              --arg date "$current_date" \
              --argjson cats "$categories" \
              '{date: $date, marketplace_category_ids: $cats}')
            
            # Update or create category file
            if [ -f "$output_file" ]; then
              jq --argjson new "$entry" '.history += [$new]' "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              jq -n \
                --arg id "$app_id" \
                --argjson new "$entry" \
                '{
                  description: "Category history for app \($id)",
                  history: [$new]
                }' > "$output_file"
            fi
          done

      - name: Fetch app install data
        run: |
          curl -s "https://monday-apps-ms.monday.com/apps_ms/public/app_analytics/app_installs" > installs.json

      - name: Process and store app data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/installs/apps/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of installs.json
          cp installs.json "src/_data/json/installs/apps/historical/${current_date}.json"

          # Save the 'current version' of installs.json
          cp installs.json "src/_data/json/installs/apps/installs.json"

          # Process each app entry
          jq -r 'to_entries[] | "\(.key) \(.value)"' installs.json | while read appId count; do
            output_file="src/_data/json/installs/apps/${appId}.json"

            if [ -f "$output_file" ]; then
              # Update existing file (append new entry)
              jq \
                --arg date "$current_date" \
                --arg count "$count" \
                '.history += [{"date": $date, "count": $count}]' \
                "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg appId "$appId" \
                --arg date "$current_date" \
                --arg count "$count" \
                '{
                  appId: $appId,
                  history: [{
                    date: $date,
                    count: $count
                  }]
                }' > "$output_file"
            fi
          done

          # Create/update the all-app-installs.json file
          total_count=$(jq '[.[] | tonumber] | add' installs.json)

          if [ -f "src/_data/json/installs/all-app-installs.json" ]; then
            # Update existing file
            jq \
              --arg date "$current_date" \
              --argjson count "$total_count" \
              '.history += [{"date": $date, "count": $count|tostring}]' \
              "src/_data/json/installs/all-app-installs.json" > tmp.json && \
              mv tmp.json "src/_data/json/installs/all-app-installs.json"
          else
            # Create new file
            jq -n \
              --argjson count "$total_count" \
              --arg date "$current_date" \
              '{
                description: "All apps in the marketplace",
                history: [{
                  date: $date,
                  count: $count|tostring
                }]
              }' > "src/_data/json/installs/all-app-installs.json"
          fi

      - name: Fetch vendor install data
        run: |
          curl -s 'https://marketplace-ms.monday.com/marketplace_ms/public/marketplace-developers?includeEnrichment=true' > vendors.json

      - name: Process and store vendor install data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/installs/vendors/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of vendors.json
          cp vendors.json "src/_data/json/installs/vendors/historical/${current_date}.json"

          # Save the 'current' version of vendors.json
          cp vendors.json "src/_data/json/installs/vendors/vendors.json"

          # Process each app entry from marketplace_developers array
          jq -c '.marketplace_developers[] | {id: .id, installs: .installs}' vendors.json | while read -r entry; do
            vendorId=$(echo "$entry" | jq -r '.id')
            count=$(echo "$entry" | jq -r '.installs')
            output_file="src/_data/json/installs/vendors/${vendorId}.json"

            if [ -f "$output_file" ]; then
              # Update existing file (append new entry)
              jq \
                --arg date "$current_date" \
                --arg count "$count" \
                '.history += [{"date": $date, "count": $count}]' \
                "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg vendorId "$vendorId" \
                --arg date "$current_date" \
                --arg count "$count" \
                '{
                  vendorId: $vendorId,
                  history: [{
                    date: $date,
                    count: $count
                  }]
                }' > "$output_file"
            fi
          done

      - name: Fetch app ratings data
        run: |
          curl -s "https://marketplace-ms.monday.com/marketplace_ms/public/analytics/app_ratings" > ratings.json

      - name: Process and store app ratings data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/ratings/apps/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of ratings.json
          cp ratings.json "src/_data/json/ratings/apps/historical/${current_date}.json"

          # Save the 'current version' of ratings.json
          cp ratings.json "src/_data/json/ratings/apps/ratings.json"

          # Process each app entry
          jq -r 'to_entries[] | "\(.key) \(.value.rating) \(.value.count)"' ratings.json | while read appId rating count; do
            output_file="src/_data/json/ratings/apps/${appId}.json"

            if [ -f "$output_file" ]; then
              # Update existing file (append new entry)
              jq \
                --arg date "$current_date" \
                --arg count "$count" \
                --arg rating "$rating" \
                '.history += [{"date": $date, "count": $count, "rating": $rating}]' \
                "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg appId "$appId" \
                --arg date "$current_date" \
                --arg count "$count" \
                --arg rating "$rating" \
                '{
                  appId: $appId,
                  history: [{
                    date: $date,
                    count: $count,
                    rating: $rating
                  }]
                }' > "$output_file"
            fi
          done

      - name: Fetch 'Trending this week' data
        run: |
          curl -s "https://monday.com/bigbrain-data-api/feature/dynamic/external/public/cross-tenant?featureName=app_marketplace_trending_this_week&version=&startTime=&endTime=&filters=%7B%22account_id%22%3A%22-1%22%7D&metrics=%5B%5D" > trending_this_week.json

      - name: Process and store 'Trending this week' data
        run: |
          # Create target directories if they don't exist
          mkdir -p src/_data/json/trending/apps/historical
          current_date=$(date +'%Y-%m-%d')

          # Save historical copy of trending_this_week.json
          cp trending_this_week.json "src/_data/json/trending/apps/historical/${current_date}.json"

          # Save the 'current' version of trending_this_week.json
          cp trending_this_week.json "src/_data/json/trending/apps/trending_this_week.json"

          marketplace_file="src/_data/json/marketplace/marketplace.json"
          historical_file="src/_data/json/trending/apps/historical/${current_date}.json"

          # For each app in marketplace.json, check if its id is in today's trending list
          jq -c '.marketplace_apps[] | {id: .id, appId: .app_id}' "$marketplace_file" | while read -r app; do
            id=$(echo "$app" | jq -r '.id')
            appId=$(echo "$app" | jq -r '.appId')
            output_file="src/_data/json/trending/apps/${appId}.json"

            # Check if the app is trending today
            if jq -e --arg id "$id" 'map(tostring) | index($id)' "$historical_file" > /dev/null; then
              count=1
            else
              count=0
            fi

            # Prepare the new history entry
            entry=$(jq -n --arg date "$current_date" --argjson count "$count" '{date: $date, count: $count}')

            if [ -f "$output_file" ]; then
              # Append to existing history
              jq --argjson entry "$entry" '.history += [$entry]' "$output_file" > tmp.json && mv tmp.json "$output_file"
            else
              # Create new file
              jq -n \
                --arg id "$id" \
                --arg appId "$appId" \
                --argjson entry "$entry" \
                '{id: $id, appId: $appId, history: [$entry]}' > "$output_file"
            fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add src/_data/json/
          git commit -m "Auto-update install data - $(date +'%Y-%m-%d %H:%M')"
          git push
